package com.shoes.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SalesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesAllPropertiesEquals(Sales expected, Sales actual) {
        assertSalesAutoGeneratedPropertiesEquals(expected, actual);
        assertSalesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesAllUpdatablePropertiesEquals(Sales expected, Sales actual) {
        assertSalesUpdatableFieldsEquals(expected, actual);
        assertSalesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesAutoGeneratedPropertiesEquals(Sales expected, Sales actual) {
        assertThat(expected)
            .as("Verify Sales auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesUpdatableFieldsEquals(Sales expected, Sales actual) {
        assertThat(expected)
            .as("Verify Sales relevant properties")
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getDiscountPercentage()).as("check discountPercentage").isEqualTo(actual.getDiscountPercentage()))
            .satisfies(e -> assertThat(e.getNewPrice()).as("check newPrice").isEqualTo(actual.getNewPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSalesUpdatableRelationshipsEquals(Sales expected, Sales actual) {}
}
